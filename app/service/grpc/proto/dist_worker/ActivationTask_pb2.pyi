"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
from . import types_pb2
import typing
if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions
DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _Brokerage:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _BrokerageEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_Brokerage.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    BBAE: _Brokerage.ValueType
    Chase: _Brokerage.ValueType
    DSPAC: _Brokerage.ValueType
    Fennel: _Brokerage.ValueType
    Fidelity: _Brokerage.ValueType
    Firstrade: _Brokerage.ValueType
    Public: _Brokerage.ValueType
    Robinhood: _Brokerage.ValueType
    Schwab: _Brokerage.ValueType
    SoFi: _Brokerage.ValueType
    Tornado: _Brokerage.ValueType
    Tradier: _Brokerage.ValueType
    Tastytrade: _Brokerage.ValueType
    Webull: _Brokerage.ValueType
    Vanguard: _Brokerage.ValueType
    WellsFargo: _Brokerage.ValueType

class Brokerage(_Brokerage, metaclass=_BrokerageEnumTypeWrapper):
    ...
BBAE: Brokerage.ValueType
Chase: Brokerage.ValueType
DSPAC: Brokerage.ValueType
Fennel: Brokerage.ValueType
Fidelity: Brokerage.ValueType
Firstrade: Brokerage.ValueType
Public: Brokerage.ValueType
Robinhood: Brokerage.ValueType
Schwab: Brokerage.ValueType
SoFi: Brokerage.ValueType
Tornado: Brokerage.ValueType
Tradier: Brokerage.ValueType
Tastytrade: Brokerage.ValueType
Webull: Brokerage.ValueType
Vanguard: Brokerage.ValueType
WellsFargo: Brokerage.ValueType
global___Brokerage = Brokerage

@typing.final
class ActivationCreds(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    USERNAME_FIELD_NUMBER: builtins.int
    PASSWORD_FIELD_NUMBER: builtins.int
    EMAIL_FIELD_NUMBER: builtins.int
    ACCESS_TOKEN_FIELD_NUMBER: builtins.int
    TOTP_SECRET_OR_NA_FIELD_NUMBER: builtins.int
    TOTP_OR_NA_FIELD_NUMBER: builtins.int
    TOTP_SECRET_FIELD_NUMBER: builtins.int
    OTP_FIELD_NUMBER: builtins.int
    CELL_PHONE_LAST_FOUR_FIELD_NUMBER: builtins.int
    PHONE_LAST_FOUR_FIELD_NUMBER: builtins.int
    DEBUG_FIELD_NUMBER: builtins.int
    DID_FIELD_NUMBER: builtins.int
    TRADING_PIN_FIELD_NUMBER: builtins.int
    USERNAME: builtins.str
    PASSWORD: builtins.str
    EMAIL: builtins.str
    ACCESS_TOKEN: builtins.str
    TOTP_SECRET_OR_NA: builtins.str
    TOTP_OR_NA: builtins.str
    TOTP_SECRET: builtins.str
    OTP: builtins.str
    CELL_PHONE_LAST_FOUR: builtins.str
    PHONE_LAST_FOUR: builtins.str
    DEBUG: builtins.str
    DID: builtins.str
    TRADING_PIN: builtins.str

    def __init__(self, *, USERNAME: builtins.str | None=..., PASSWORD: builtins.str | None=..., EMAIL: builtins.str | None=..., ACCESS_TOKEN: builtins.str | None=..., TOTP_SECRET_OR_NA: builtins.str | None=..., TOTP_OR_NA: builtins.str | None=..., TOTP_SECRET: builtins.str | None=..., OTP: builtins.str | None=..., CELL_PHONE_LAST_FOUR: builtins.str | None=..., PHONE_LAST_FOUR: builtins.str | None=..., DEBUG: builtins.str | None=..., DID: builtins.str | None=..., TRADING_PIN: builtins.str | None=...) -> None:
        ...

    def HasField(self, field_name: typing.Literal['ACCESS_TOKEN', b'ACCESS_TOKEN', 'CELL_PHONE_LAST_FOUR', b'CELL_PHONE_LAST_FOUR', 'DEBUG', b'DEBUG', 'DID', b'DID', 'EMAIL', b'EMAIL', 'OTP', b'OTP', 'PASSWORD', b'PASSWORD', 'PHONE_LAST_FOUR', b'PHONE_LAST_FOUR', 'TOTP_OR_NA', b'TOTP_OR_NA', 'TOTP_SECRET', b'TOTP_SECRET', 'TOTP_SECRET_OR_NA', b'TOTP_SECRET_OR_NA', 'TRADING_PIN', b'TRADING_PIN', 'USERNAME', b'USERNAME', '_ACCESS_TOKEN', b'_ACCESS_TOKEN', '_CELL_PHONE_LAST_FOUR', b'_CELL_PHONE_LAST_FOUR', '_DEBUG', b'_DEBUG', '_DID', b'_DID', '_EMAIL', b'_EMAIL', '_OTP', b'_OTP', '_PASSWORD', b'_PASSWORD', '_PHONE_LAST_FOUR', b'_PHONE_LAST_FOUR', '_TOTP_OR_NA', b'_TOTP_OR_NA', '_TOTP_SECRET', b'_TOTP_SECRET', '_TOTP_SECRET_OR_NA', b'_TOTP_SECRET_OR_NA', '_TRADING_PIN', b'_TRADING_PIN', '_USERNAME', b'_USERNAME']) -> builtins.bool:
        ...

    def ClearField(self, field_name: typing.Literal['ACCESS_TOKEN', b'ACCESS_TOKEN', 'CELL_PHONE_LAST_FOUR', b'CELL_PHONE_LAST_FOUR', 'DEBUG', b'DEBUG', 'DID', b'DID', 'EMAIL', b'EMAIL', 'OTP', b'OTP', 'PASSWORD', b'PASSWORD', 'PHONE_LAST_FOUR', b'PHONE_LAST_FOUR', 'TOTP_OR_NA', b'TOTP_OR_NA', 'TOTP_SECRET', b'TOTP_SECRET', 'TOTP_SECRET_OR_NA', b'TOTP_SECRET_OR_NA', 'TRADING_PIN', b'TRADING_PIN', 'USERNAME', b'USERNAME', '_ACCESS_TOKEN', b'_ACCESS_TOKEN', '_CELL_PHONE_LAST_FOUR', b'_CELL_PHONE_LAST_FOUR', '_DEBUG', b'_DEBUG', '_DID', b'_DID', '_EMAIL', b'_EMAIL', '_OTP', b'_OTP', '_PASSWORD', b'_PASSWORD', '_PHONE_LAST_FOUR', b'_PHONE_LAST_FOUR', '_TOTP_OR_NA', b'_TOTP_OR_NA', '_TOTP_SECRET', b'_TOTP_SECRET', '_TOTP_SECRET_OR_NA', b'_TOTP_SECRET_OR_NA', '_TRADING_PIN', b'_TRADING_PIN', '_USERNAME', b'_USERNAME']) -> None:
        ...

    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal['_ACCESS_TOKEN', b'_ACCESS_TOKEN']) -> typing.Literal['ACCESS_TOKEN'] | None:
        ...

    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal['_CELL_PHONE_LAST_FOUR', b'_CELL_PHONE_LAST_FOUR']) -> typing.Literal['CELL_PHONE_LAST_FOUR'] | None:
        ...

    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal['_DEBUG', b'_DEBUG']) -> typing.Literal['DEBUG'] | None:
        ...

    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal['_DID', b'_DID']) -> typing.Literal['DID'] | None:
        ...

    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal['_EMAIL', b'_EMAIL']) -> typing.Literal['EMAIL'] | None:
        ...

    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal['_OTP', b'_OTP']) -> typing.Literal['OTP'] | None:
        ...

    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal['_PASSWORD', b'_PASSWORD']) -> typing.Literal['PASSWORD'] | None:
        ...

    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal['_PHONE_LAST_FOUR', b'_PHONE_LAST_FOUR']) -> typing.Literal['PHONE_LAST_FOUR'] | None:
        ...

    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal['_TOTP_OR_NA', b'_TOTP_OR_NA']) -> typing.Literal['TOTP_OR_NA'] | None:
        ...

    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal['_TOTP_SECRET', b'_TOTP_SECRET']) -> typing.Literal['TOTP_SECRET'] | None:
        ...

    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal['_TOTP_SECRET_OR_NA', b'_TOTP_SECRET_OR_NA']) -> typing.Literal['TOTP_SECRET_OR_NA'] | None:
        ...

    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal['_TRADING_PIN', b'_TRADING_PIN']) -> typing.Literal['TRADING_PIN'] | None:
        ...

    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal['_USERNAME', b'_USERNAME']) -> typing.Literal['USERNAME'] | None:
        ...
global___ActivationCreds = ActivationCreds

@typing.final
class Task(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    BASE_TASK_FIELD_NUMBER: builtins.int
    BROKERAGE_FIELD_NUMBER: builtins.int
    ACCOUNT_DETAILS_FIELD_NUMBER: builtins.int
    brokerage: global___Brokerage.ValueType

    @property
    def base_task(self) -> types_pb2.BaseTask:
        ...

    @property
    def account_details(self) -> global___ActivationCreds:
        ...

    def __init__(self, *, base_task: types_pb2.BaseTask | None=..., brokerage: global___Brokerage.ValueType=..., account_details: global___ActivationCreds | None=...) -> None:
        ...

    def HasField(self, field_name: typing.Literal['account_details', b'account_details', 'base_task', b'base_task']) -> builtins.bool:
        ...

    def ClearField(self, field_name: typing.Literal['account_details', b'account_details', 'base_task', b'base_task', 'brokerage', b'brokerage']) -> None:
        ...
global___Task = Task

@typing.final
class Response(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    STATUS_FIELD_NUMBER: builtins.int
    ACCOUNT_ID_FIELD_NUMBER: builtins.int
    MESSAGE_FIELD_NUMBER: builtins.int
    status: types_pb2.Status.ValueType
    message: builtins.str

    @property
    def account_id(self) -> types_pb2.UUID:
        ...

    def __init__(self, *, status: types_pb2.Status.ValueType=..., account_id: types_pb2.UUID | None=..., message: builtins.str | None=...) -> None:
        ...

    def HasField(self, field_name: typing.Literal['_account_id', b'_account_id', '_message', b'_message', 'account_id', b'account_id', 'message', b'message']) -> builtins.bool:
        ...

    def ClearField(self, field_name: typing.Literal['_account_id', b'_account_id', '_message', b'_message', 'account_id', b'account_id', 'message', b'message', 'status', b'status']) -> None:
        ...

    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal['_account_id', b'_account_id']) -> typing.Literal['account_id'] | None:
        ...

    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal['_message', b'_message']) -> typing.Literal['message'] | None:
        ...
global___Response = Response